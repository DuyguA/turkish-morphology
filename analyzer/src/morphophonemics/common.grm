# -*- mode: Thrax; coding: utf-8; -*-
# Copyright 2019 The Google Research Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This file defines commonly used constants across grammars that implement
# Turkish morphophonemic processes under //analyzer/src/morphophonemics.

import 'alphabet.grm' as alphabet;

# Segmentation markup.
export kMorphemeBoundary =
  "+".utf8
;

export kApostrophe =
  "'".utf8
;

# Morphophonemic annotation markup.
export kRoundedVowelMarkup = Optimize[
  "%".utf8
| "}".utf8
];

export kUnroundedVowelMarkup = Optimize[
  "{".utf8
| "\[".utf8
];

export kVowelDropMarkup =
  "?".utf8
;

export kPronunciationMarkup =
  "*".utf8
;

export kGeminationMarkup =
  "\"".utf8
;

export kConsonantVoicingMarkup =
  "~".utf8
;

export kYInsertionMarkup =
  "^".utf8
;

export kStemFinalAnnotationMarkup = Optimize[
  kPronunciationMarkup
| kGeminationMarkup
| kConsonantVoicingMarkup
| kYInsertionMarkup
];

# Meta-phonemes that represent sets of phonemes.
export kLowUnroundedVowelMetaPhoneme =
  "A".utf8  # {a, e, <eps>}
;

export kHighVowelMetaPhoneme =
  "H".utf8  # {u, ü, ı, i, <eps>}
;

export kVowelClosingMetaPhoneme =
  "E".utf8  # {e, i}
;

export kDentalConsonantMetaPhoneme =
  "D".utf8  # {d, t}
;

export kDroppingNMetaPhoneme =
  "N".utf8  # {n, <eps>}
;

export kDroppingYMetaPhoneme =
  "Y".utf8  # {y, <eps>}
;

export kDroppingSMetaPhoneme =
  "S".utf8  # {s, <eps>}
;

export kStemFinalVoicedKMetaPhoneme =
  "K".utf8  # {k}
;

export kStemFinalVoicedCMetaPhoneme =
  "Ç".utf8  # {ç}
;

export kSuffixInitialCMetaPhoneme =
  "C".utf8  # {c, ç}
;

export kDroppingConsonantMetaPhoneme = Optimize[
  kDroppingNMetaPhoneme
| kDroppingYMetaPhoneme
| kDroppingSMetaPhoneme
];

export kVoicedConsonantMetaPhoneme = Optimize[
  kStemFinalVoicedKMetaPhoneme
| kStemFinalVoicedCMetaPhoneme
];

export kVowelMetaPhoneme = Optimize[
  kLowUnroundedVowelMetaPhoneme
| kHighVowelMetaPhoneme
| kVowelClosingMetaPhoneme
];

# Vowels.
export kBackRoundedVowel = Optimize[
  "o".utf8
| "u".utf8
| "û".utf8
];

export kBackUnroundedVowel = Optimize[
  "a".utf8
| "â".utf8
| "ı".utf8
];

export kFrontRoundedVowel = Optimize[
  "ö".utf8
| "ü".utf8
| kRoundedVowelMarkup
];

export kFrontUnroundedVowel = Optimize[
  "e".utf8
| "i".utf8
| "î".utf8
| kUnroundedVowelMarkup
| kVowelClosingMetaPhoneme
];

export kVowel = Optimize[
  kBackRoundedVowel
| kBackUnroundedVowel
| kFrontRoundedVowel
| kFrontUnroundedVowel
| kVowelMetaPhoneme
];

# Consonants.
export kFstkcshp = Optimize[
  "f".utf8
| "s".utf8
| "t".utf8
| "k".utf8
| "ç".utf8
| "ş".utf8
| "h".utf8
| "p".utf8
| kVoicedConsonantMetaPhoneme
];

# Others for conveniences.
export kConsonantOrMarkup =
  alphabet.kCharacter - (kVowel | kMorphemeBoundary | kApostrophe)
;

export kWordStem =
  "[BOS]" (alphabet.kCharacter - kMorphemeBoundary)+
;

export kEndOfWordStem =
  kStemFinalAnnotationMarkup* kApostrophe?
;

export kEndOfMorpheme =
  (kEndOfWordStem kMorphemeBoundary) | "[EOS]"
;

export kMorphemeEndsWithVowel =
  kVowel kEndOfWordStem kMorphemeBoundary+
;

export kMorphemeEndsWithConsonant =
  kConsonantOrMarkup kEndOfWordStem kMorphemeBoundary+
;

export kMorphemeEndsWithFstkcshp =
  kFstkcshp kEndOfWordStem kMorphemeBoundary+
;

export kMorphemeStartsWithVowel =
  kMorphemeBoundary+ kDroppingConsonantMetaPhoneme? kVowelMetaPhoneme
;
