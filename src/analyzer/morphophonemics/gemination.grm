# -*- mode: Thrax; coding: utf-8; -*-
# Copyright 2019 The Google Research Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This file defines a grammar that duplicates consonants {b, c, d, f, k, l, m,
# n, r, s, t, z}, if they;
#   - appear as the last phoneme of the word stem,
#   - are annotated for gemination with stem final gemination markup '"',
#   - are followed by a suffix which starts with a vowel.

import 'alphabet.grm' as alphabet;
import 'common.grm' as common;
import 'unicode.grm' as unicode;

# We do not attempt to geminate word stems that are annotated for voicing
# exception 'ร', since they can potentially be realised as 'รง', which does not
# go under gemination. Thus, assuming that consonant voicing is always resolved
# before gemination.
duplicate_consonant =
  ("b".utf8 common.kGeminationMarkup : "b".utf8 "b".utf8)
| ("c".utf8 common.kGeminationMarkup : "c".utf8 "c".utf8)
| ("d".utf8 common.kGeminationMarkup : "d".utf8 "d".utf8)
| ("f".utf8 common.kGeminationMarkup : "f".utf8 "f".utf8)
| ("k".utf8 common.kGeminationMarkup : "k".utf8 "k".utf8)
| ("l".utf8 common.kGeminationMarkup : "l".utf8 "l".utf8)
| ("m".utf8 common.kGeminationMarkup : "m".utf8 "m".utf8)
| ("n".utf8 common.kGeminationMarkup : "n".utf8 "n".utf8)
| ("r".utf8 common.kGeminationMarkup : "r".utf8 "r".utf8)
| ("s".utf8 common.kGeminationMarkup : "s".utf8 "s".utf8)
| ("t".utf8 common.kGeminationMarkup : "t".utf8 "t".utf8)
| ("z".utf8 common.kGeminationMarkup : "z".utf8 "z".utf8)
| ("K".utf8 common.kGeminationMarkup : "k".utf8 "k".utf8)
;
remove_markup =
  ("b".utf8 common.kGeminationMarkup : "b".utf8)
| ("c".utf8 common.kGeminationMarkup : "c".utf8)
| ("d".utf8 common.kGeminationMarkup : "d".utf8)
| ("f".utf8 common.kGeminationMarkup : "f".utf8)
| ("k".utf8 common.kGeminationMarkup : "k".utf8)
| ("l".utf8 common.kGeminationMarkup : "l".utf8)
| ("m".utf8 common.kGeminationMarkup : "m".utf8)
| ("n".utf8 common.kGeminationMarkup : "n".utf8)
| ("r".utf8 common.kGeminationMarkup : "r".utf8)
| ("s".utf8 common.kGeminationMarkup : "s".utf8)
| ("t".utf8 common.kGeminationMarkup : "t".utf8)
| ("z".utf8 common.kGeminationMarkup : "z".utf8)
| ("K".utf8 common.kGeminationMarkup : "K".utf8)
;

duplicate_stem_final_consonant = CDRewrite[
  duplicate_consonant,
  common.kWordStem,
  common.kMorphemeStartsWithVowel,
  alphabet.kSigmaStar
];
remove_gemination_markup = CDRewrite[
  remove_markup,
  common.kWordStem,
  common.kEndOfMorpheme,
  alphabet.kSigmaStar
];

export RESOLVE = Optimize[
  duplicate_stem_final_consonant
@ remove_gemination_markup
];

# Only used for testing.
export RESOLVE_INTERNAL = Optimize[
  unicode.UTF8_TO_UNICODE  # input to RESOLVE should be Unicode codepoints.
@ RESOLVE
@ unicode.UNICODE_TO_UTF8  # grm_tester_lib accepts input as UTF-8 bytes.
];
